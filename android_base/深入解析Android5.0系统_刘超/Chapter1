第一章 建立 Android 系统开发环境



Android 应用使用 Java 语言开发, 底层使用 C/C++ 开发, 因此掌握 Java 语言和 C/C++ 语言是进行 Android 系统开发的必要条件.

Android 运行在 Linux 内核(从标准的 Linux 内核修改移植而来)之上, 但是, 开发 Android 系统组件并不需要读者拥有特别高深的 Linux 系统知识,
只要掌握基本的 Linux 命令和常识就够了. 但是如果希望成为优秀的系统开发者, 深入理解 Linux 内核还是非常有必要的.



1.1 安装操作系统
    Google 推荐使用 64 位 Ubuntu 操作系统开发 Android, Ubuntu 是一款优秀的Linux桌面操作系统, 每年4月和10月固定发行2个版本, 其中偶数年的4月发行的版本作为TLS版本(长期支持版), 可以得到3年的升级支持.

1.1.1 安装方式的选择
    Ubuntu 有两种安装方式: 在 PC 上直接安装或者安装在虚拟机中, 专业的 Android 系统开发会在 PC 上直接安装 Ubuntu 系统.

1.1.2 下载和安装 Ubuntu
    Ubuntu 官方网站:
        https://www.ubuntu.com
        Canonical有限公司(Canonical Group Ltd)

    Ubuntu 安装完成后可以将 Ubuntu 的软件源切换成国内的镜像, 提高下载安装各种软件包的速度, 下面是更改软件源的操作步骤:
        依次点击 System Settings
                                -> Software & Updates
                                -> Ubuntu Software
                                -> 然后点击 Download from 选项列表, 在弹出的列表中选择 Others -> China...,
                                -> 找到后选择一个镜像地址(例如: mirrors.sohu.com),
    更新软件源后需要执行下面这行命令来更新本地的软件包索引信息:
        sudo apt-get update


1.1.3 使用 Ubuntu 遇到的问题
    以前发生过 Ubuntu 12.10 无法编译 Android 的问题, 原因是新版本搭载的 gcc-4.7 不能编译当时的 Android 代码.

    不过 Ubuntu 有一个很有用的特性, 就是能同时安装一个软件的不同版本.

    因此, 解决的办法就是再安装一个旧版本的 gcc-4.4
    下面是在 Ubuntu 上安装 4.4 版本的 gcc 和 g++ 的命令:
        sudo apt-get install gcc-4.4 g++-4.4 g++-4.4-multilib gcc-4.4-multilib
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.4 50
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.4 50

    配置选择版本的命令是:
        sudo update-alternatives --config gcc
        sudo update-alternatives --config g++

    一般而言, google 会在新的 Android 版本里解决类似的问题, 但是旧版本还是会存在问题, 如果需要同时维护几个版本的 Android 系统, 需要使用上面的方法来安装多个版本的 gcc.



1.2 安装开发包

1.2.2 安装 OpenJDK 1.7
    从 Android 5.0 开始, Google 支持使用 OpenJDK 1.7 来编译 Android, 因此, 我们可以使用 apt-get 快速地安装编译环境.
    下面是安装 OpenJDK 1.7 的命令
        sudo apt-get install openjdk-7-jdk
        sudo update-alternatives --config java
        sudo update-alternatives --config javac

    下面是安装 OpenJDK 1.8 的命令
        sudo apt-get install openjdk-8-jdk
        sudo update-alternatives --config java
        sudo update-alternatives --config javac

    测试是否安装成功:
        $ java -version


1.2.3 安装编译需要的开发包
    Google 指定的安装包列表可以在 Android 的官方网站上查到.
    这个列表会随着 Android 版本的变化而调整, 安装新的开发环境时最好到 Android 的官网上下载这个列表,
    网址是: http://source.android.com/source/initializing.html
    编译环境的构建方法: http://source.android.com/source/initializing.html



1.3 安装一些有用的开发工具
    编译Android 的源码并不需要 Android SDK, 但是 Android SDK 中附带了很多有用工具, 如 adb, ddms, hierarchyviewer等, 都是进行 Android 系统开发调试必须用到的.

    Android SDK: 可以从 Android 的官方网站中下载, 下载解压缩后将 platform-tools 和 tools 目录加入到 Ubuntu 的 PATH 环境变量中, 方便以后使用.

    Android Studio: Google 基于著名的 IntelliJ IDEA 修改而来的免费集成开发工具, 可以从 Android 的官方网站中下载.

    Source Insight: 优秀的源码分析工具, 是分析Android源码的利器.

    Meld: 比较合并工具, 安装命令 sudo apt-get install meld.



1.4 下载源码

1.4.1 Git and Repo 简介

    Git: 开放源码的版本控制软件.

    Repo: 是 Google 开发的一个脚本文件, 只是在 Git 的基础上封装了一层, 用来简化 Git 下载 Android 源码的过程.(下载Kernel的源码还是要使用Git命令)

    Repo的使用方法及步骤:
        1. 首先通过 curl 下载 Repo 的最新版本:
            $ curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo

        2. 修改文件的属性为可执行:
            $ chmod a+x~/bin/repo

        3. 创建源码保存目录
            $ mkdir android_p_main
            $ cd android_p_main

        3. 下载代码前, 需要知道版本的分支名, 通过 Repo 可以查看所有分支名:
            $ repo init -u https://android.googlesource.com/platform/manifest

        4. 初始化下载信息
            $ repo init -u https://android.googlesource.com/platform/manifest -b android-5.1.0_r2
            $ repo init -u git://aosp.tuna.tsinghua.edu.cn/android/platform/manifest -b android-5.0.2_r1

        5. 启动多个线程同时下载:
            $ repo sync -j8 -qc --no-tags

        说明:
            repo init 的 -u 参数指定用来初始化的软件仓库, -b 参数指定某个分支(不指定则默认为master分支).
            repo help 和 repo help init 命令可以查看帮助.
        注意:
            Repo 的 init 指令运行后会在当前目录下创建一个隐藏目录 .repo, 重新执行 init 指令前必须先删除这个隐藏目录, 否则执行会失败.

1.4.2
    Android 源码版本历史可以在 http://androidxref.com 中看到, 每个大的版本下面可能还会有好几个分支, 每个分支就是一个小的升级版本, 主要是修复 Bug 和 小范围的功能调整.



亲测有效的编译环境搭建流程
Build:
    Android O requires Java JDK 1.8. If it is not yet installed on your working environment, install it with this command:
        sudo apt-get install openjdk-8-jdk

    Kernel is upgraded to msm-4.4. You need to install libssl in order to pass kernel build:
        sudo apt-get install libssl-dev

    Install xlrd
        sudo pip install xlrd

    Install protobuf
        1. Install protobuf compiler:
            Ubuntu 14:
            wget https://github.com/google/protobuf/releases/download/v2.6.1/protobuf-2.6.1.tar.gz
            tar -xzvf protobuf-2.6.1.tar.gz
            cd protobuf-2.6.1
            sudo ./configure
            sudo make
            sudo make check
            sudo make install

            Ubuntu 16:
            sudo apt-get install protobuf-compiler

            Check the protoc version, it should be 2.6.1
            protoc --version

            On Ubuntu 14, if you see the following error when executing the above command:
            protoc: error while loading shared libraries: libprotoc.so.8: cannot open shared
            Solution:
            sudo vi /etc/ld.so.conf.d/libprotobuf.conf
            write the file with one line as below:
            /usr/local/lib
            then run: sudo ldconfig; protoc --version

        2. sudo apt-get install python-protobuf

        3. sudo pip install protobuf
            If you see the following error when executing the above command:
                Requirement already satisfied (use --upgrade to upgrade): protobuf in /usr/lib/python2.7/dist-packages
            Solution:
            sudo pip install --upgrade protobuf


Build command:
    Android HLOS only:
        sync -j8 -qc --no-tags
        source build/envsetup.sh
        lunch df91_hu_mpc-userdebug
        make -j8

    Full build for QFIL package:
        ./make_leauto.sh -b qfil -p df91_hu_mpc -t emmc -j8


Potential issues and solutions:
    error fatal: ssh variant 'simple' does not support setting port
    => export GIT_SSH_VARIANT=ssh
    
    keep asking for passphrase
    => eval $(ssh-agent)
    => ssh-add ~/.ssh/id_rsa

请参考链接https://www.jianshu.com/p/6c2de181d83a